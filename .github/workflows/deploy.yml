name: CI/CD Pipeline for Node.js API and PostgreSQL

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v2

      - name: Set up SSH key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" | base64 --decode > ~/.ssh/test-initial.pem
          chmod 600 ~/.ssh/test-initial.pem  # Set correct permissions for the key
          ls -l ~/.ssh  # Check permissions and verify file
          cat ~/.ssh/test-initial.pem  # Print the key to make sure it was decoded correctly

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Add SSH Key to Agent
        run: |
          eval $(ssh-agent -s)  # Start the SSH agent
          ssh-add ~/.ssh/test-initial.pem  # Add the private key to the agent

      - name: SSH into EC2 and deploy
        run: |
          echo "Running SSH command..."
          set -x  # Enable shell debugging
          ssh -vvv -i ~/.ssh/test-initial.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@${{ secrets.AWS_EC2_HOST }} <<'EOF'
            echo "SSH connected to EC2 instance"
            
            # Listing contents of the home directory on EC2
            echo "Listing contents of the home directory on EC2:"
            ls -l /home/ec2-user
            
            # Checking current working directory
            echo "Checking current working directory"
            pwd

            # Navigate to project directory and verify its contents
            echo "Navigating to /home/ec2-user/node-test"
            cd /home/ec2-user/node-test || exit
            ls -l

            # Check if Docker is installed on EC2
            echo "Checking if Docker is installed"
            if ! command -v docker &> /dev/null
            then
                echo "Docker is not installed. Installing Docker..."
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            else
                echo "Docker is already installed."
            fi

            # Pull the latest code from GitHub
            echo "Pulling latest code from GitHub"
            git fetch origin
            git checkout master
            git pull origin master

            # Step 1: Set up persistent PostgreSQL container
            echo "Setting up PostgreSQL container..."
            POSTGRES_CONTAINER=$(docker ps -q -f name=postgres)
            if [ -z "$POSTGRES_CONTAINER" ]; then
                echo "Postgres container is not running. Creating and starting a new one..."
                docker volume create pgdata  # Create a volume for persistent storage
                docker run -d --name postgres \
                    -e POSTGRES_PASSWORD=${{ secrets.AWS_POSTGRES_PASSWORD }} \
                    -e POSTGRES_USER=${{ secrets.AWS_POSTGRES_USER }} \
                    -e POSTGRES_DB=${{ secrets.AWS_POSTGRES_DB }} \
                    -v pgdata:/var/lib/postgresql/data \
                    -p 5432:5432 \
                    postgres
            else
                echo "Postgres container is already running."
            fi

            # Step 2: Spin up temporary container for testing
            echo "Spinning up temporary container for testing..."
            docker build -t node-api-test .  # Build the test container
            docker run --name node-api-test-temp node-api-test  # Run the container in the background

            # Step 3: Install dependencies and run tests inside the temporary container
            echo "Running tests inside the temporary container..."
            docker exec node-api-test-temp npm install  # Install dependencies
            TEST_RESULT=$(docker exec node-api-test-temp npm run test)  # Run the tests

            # Check test result
            echo "Test results: $TEST_RESULT"
            if [[ $TEST_RESULT == *"Test Passed"* ]]; then
                echo "Tests passed, proceeding with deployment."
            else
                echo "Tests failed, stopping deployment."
                docker stop node-api-test-temp  # Stop the test container
                docker rm node-api-test-temp  # Remove the test container
                exit 1  # Exit the script and stop the deployment
            fi

            # Cleanup: Stop and remove the temporary container after tests (regardless of test result)
            echo "Cleaning up: Stopping and removing temporary test container..."
            docker stop node-api-test-temp
            docker rm node-api-test-temp

            # Step 3: Handle Node.js API container deployment
            echo "Deploying Node.js API container..."
            NODE_API_CONTAINER=$(docker ps -q -f name=hopeful_cohen)
            if [ -z "$NODE_API_CONTAINER" ]; then
                echo "Node.js API container is not running. Creating and starting a new one..."
                docker build -t hopeful_cohen .
                docker run -d --name hopeful_cohen \
                    -p 3000:3000 \
                    --env DATABASE_URL=${{ secrets.AWS_DATABASE_URL }} \
                    hopeful_cohen
            else
                echo "Node.js API container is already running. Restarting Node.js API container..."

                  docker stop hopeful_cohen
                  docker rm hopeful_cohen
                  docker build -t hopeful_cohen .
                  docker run -d --name hopeful_cohen \
                      -p 3000:3000 \
                      --env DATABASE_URL=${{ secrets.AWS_DATABASE_URL }} \
                      hopeful_cohen

                  # Wait for the container to be fully started
                  echo "Waiting for the container to be fully initialized..."
                  sleep 10  # Give the container some time to start

                  # Run Prisma migrations inside the container
                  echo "Running Prisma migrations..."
                  docker exec -it hopeful_cohen npx prisma migrate deploy

                  # Check if Prisma migration was successful
                  echo "Checking Prisma migration status..."
                  MIGRATION_STATUS=$(docker exec hopeful_cohen npx prisma migrate status)
                  echo "Prisma Migration Status: $MIGRATION_STATUS"

                  # Optionally: View logs if there's an issue
                  echo "Displaying logs from the container to troubleshoot..."
                  docker logs hopeful_cohen
            fi

            echo "Deployment completed"
          EOF
