generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id   Int     @id @default(autoincrement())
  name String?
}

model countries {
  id     Int     @id @default(autoincrement())
  name   String
  
  cities cities[]
  defValue def_value[]
}

model cities {
  id   Int     @id @default(autoincrement())
  name String
  country String
  search String?
  lat Float?
  lng Float?
  seaside Boolean?
  size    Float?

  countriesId Int?       @map("countries_id")

  countries   countries? @relation(fields: [countriesId], references: [id])

  prices  prices[]
  socialLifestyleReports city_social_lifestyle_report[]
  crimeRanks crime_ranks[]
  weathers weathers[]
  cityContext city_context[]
  expatTip expat_tip[]
  cityFeel city_feel[]
  defValue def_value[]
}

model years {
  id    Int    @id @default(autoincrement())
  year  Int    @unique

  prices prices[]
  socialLifestyleReports city_social_lifestyle_report[]
  crimeRanks crime_ranks[]
}

model categories {
  id          Int       @id @default(autoincrement())
  name        String    @unique

  products    products[]
}

model products {
  id          Int     @id @default(autoincrement())
  name        String
  categoryId    Int  @map("category_id")
  unit        String
  description String?
  type        ProductType?

  category    categories @relation(fields: [categoryId], references: [id])
  prices prices[]
}

model prices {
  id         Int     @id @default(autoincrement()) 
  price      Float 
  top        Float?
  bottom     Float?  
  currency   String  
  cityId     Int    @map("city_id")
  productId  Int    @map("product_id")
  yearId     Int    @map("year_id")
  createdAt  DateTime @default(now())  @map("created_at")
  updatedAt  DateTime @updatedAt  @map("updated_at")
  priceType  PriceType  @map("price_type")

  city       cities    @relation(fields: [cityId], references: [id])
  product    products @relation(fields: [productId], references: [id])
  year       years    @relation(fields: [yearId], references: [id])
}

enum PriceType {
  CURRENT    // The current price (most recent one)
  HISTORICAL // A historical price at a specific time
}

enum ProductType {
  ALL
  HISTORICAL
  CURRENT
}

model city_social_lifestyle_report {
  id            Int      @id @default(autoincrement())
  cityId        Int    @map("city_id")
  yearId        Int    @map("year_id")
  avg_price     Float?
  currency      String?
  type          SocialType?
  created_at    DateTime @default(now())

  city cities @relation(fields: [cityId], references: [id])
  year years  @relation(fields: [yearId], references: [id])
}

enum SocialType {
  SOLO
  PAIR
  FAMILY
}

model crime_aspects {
  id        Int       @id @default(autoincrement())
  name      String       @unique
  created_at DateTime     @default(now())

  crimeRanks crime_ranks[]
}

model crime_ranks {
  id              Int            @id @default(autoincrement())
  cityId          Int            @map("city_id")
  yearId          Int            @map("year_id")
  crimeAspectId   Int            @map("crime_aspect_id")
  rank            Float
  created_at      DateTime       @default(now())

  // Relations
  city            cities         @relation(fields: [cityId], references: [id])
  year            years          @relation(fields: [yearId], references: [id])
  crime_aspect    crime_aspects  @relation(fields: [crimeAspectId], references: [id])

  @@unique([cityId, yearId, crimeAspectId])
}

model weathers {
  id              Int            @id @default(autoincrement())
  cityId          Int            @map("city_id")
  sunshine        Int
  rain            Int
  cold            Int
  heat            Int
  cold_extremes   Int
  heat_extremes   Int
  humidity        Int
  severe          String
  lowest          Int
  highest         Int
  created_at      DateTime       @default(now())

  // Relations
  city            cities         @relation(fields: [cityId], references: [id])

  @@unique([cityId])
}


model city_context {
  id                  Int      @id @default(autoincrement())
  cityId              Int      @map("city_id")
  climate             String
  tourismLevel        String   @map("tourism_level")
  expatCommunity      String   @map("expat_community")
  natureAccess        String   @map("nature_access")
  localLifestyle      String   @map("local_lifestyle")
  seasonality         String
  cultureHighlights   String   @map("culture_highlights")
  sportsAndActivities String   @map("sports_and_activities")
  detailedStory       String   @db.Text @map("detailed_story")
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())

  city                cities     @relation(fields: [cityId], references: [id])

  @@index([cityId])
  @@unique([cityId])
}

model expat_tip {
  id        Int      @id @default(autoincrement())
  cityId    Int      @map("city_id")
  tip       String   @db.Text
  category  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  city      cities     @relation(fields: [cityId], references: [id])

  @@index([cityId])
}

model city_feel {
  id        Int    @id @default(autoincrement())
  cityId    Int    @map("city_id")
  rank      Int    
  tags      String?
  budget    Float?
  created_at   DateTime @default(now())

  city      cities   @relation(fields: [cityId], references: [id])

  @@unique([cityId])
}

model aspect {
  id       Int      @id @default(autoincrement())
  name     String        
  field    String                 
  scope    String? 

  definitions definition[]
}

model definition {
  id        Int      @id @default(autoincrement())
  label     String   
  type      String  
  aspectId  Int      @map("aspect_id")
  aspect    aspect   @relation(fields: [aspectId], references: [id])

  values    def_value[]
}

model def_value {
  id            Int      @id @default(autoincrement())
  definitionId  Int     @map("definition_id")
  cityId        Int?     @map("city_id")
  countryId     Int?   @map("country_id")
  value         String?
  score         Float?   
  
  comment       String?
  note          String?
  type          String 

  visible       Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  definition    definition @relation(fields: [definitionId], references: [id])
  city          cities?   @relation(fields: [cityId], references: [id])
  countries     countries? @relation(fields: [countryId], references: [id])
}
